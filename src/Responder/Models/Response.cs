using Newtonsoft.Json;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Phlank.Responder
{
    /// <summary>
    /// Content model for deserializing responses generated by the <see cref="IResponder"/>.
    /// </summary>
    public class Response
    {
        /// <summary>
        /// Warnings regarding the attempted operation.
        /// </summary>
        [JsonProperty(PropertyName = "warnings", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("warnings")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public IEnumerable<Warning> Warnings { get; set; }

        /// <summary>
        /// The content to return back to the user as a result of the operation.
        /// </summary>
        [JsonProperty(PropertyName = "data", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("data")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public object Data { get; set; }

        /// <summary>
        /// An error which occured while trying to fulfill the request of the client.
        /// </summary>
        [JsonProperty(PropertyName = "error", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("error")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public ApiError Error { get; set; }

        [Newtonsoft.Json.JsonIgnore]
        [System.Text.Json.Serialization.JsonIgnore]
        public bool IsSuccessful { get => Error == null; }
    }

    /// <summary>
    /// Content model for deserializing responses generated by the <see cref="IResponder"/>.
    /// </summary>
    public class Response<T> where T : class
    {
        /// <summary>
        /// Warnings regarding the attempted operation.
        /// </summary>
        [JsonProperty(PropertyName = "warnings", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("warnings")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public IEnumerable<Warning> Warnings { get; set; }

        /// <summary>
        /// The content to return back to the user as a result of the operation.
        /// </summary>
        [JsonProperty(PropertyName = "data", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("data")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public T Data { get; set; }

        /// <summary>
        /// An error which occured while trying to fulfill the request of the client.
        /// </summary>
        [JsonProperty(PropertyName = "error", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("error")]
#if NET5_0_OR_GREATER
        [System.Text.Json.Serialization.JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
#endif
        public ApiError Error { get; set; }

        public bool IsSuccessful { get => Error == null; }
    }
}
